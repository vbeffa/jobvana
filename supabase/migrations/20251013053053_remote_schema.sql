create type "public"."interview_round_status" as enum ('pending', 'accepted', 'declined');

drop policy "Job applications are visible to everyone." on "public"."applications";

drop policy "Job interview rounds are visible to everyone." on "public"."interview_rounds";

drop policy "Job interviews are visible to everyone." on "public"."interviews";

drop policy "Job seekers can view their own data" on "public"."job_seekers";

drop policy "Companies are visible to themselves or to job seekers" on "public"."companies";

drop policy "Job roles are visible to their companies or to job seekers" on "public"."job_roles";

drop policy "Job seekers can edit their own data" on "public"."job_seekers";

drop policy "Companies and job seekers can view job skills" on "public"."job_skills";

drop policy "Jobs are visible to their companies or to job seekers" on "public"."jobs";

revoke delete on table "public"."job_seeker_skills" from "anon";

revoke insert on table "public"."job_seeker_skills" from "anon";

revoke references on table "public"."job_seeker_skills" from "anon";

revoke select on table "public"."job_seeker_skills" from "anon";

revoke trigger on table "public"."job_seeker_skills" from "anon";

revoke truncate on table "public"."job_seeker_skills" from "anon";

revoke update on table "public"."job_seeker_skills" from "anon";

revoke delete on table "public"."job_seeker_skills" from "authenticated";

revoke insert on table "public"."job_seeker_skills" from "authenticated";

revoke references on table "public"."job_seeker_skills" from "authenticated";

revoke select on table "public"."job_seeker_skills" from "authenticated";

revoke trigger on table "public"."job_seeker_skills" from "authenticated";

revoke truncate on table "public"."job_seeker_skills" from "authenticated";

revoke update on table "public"."job_seeker_skills" from "authenticated";

revoke delete on table "public"."job_seeker_skills" from "service_role";

revoke insert on table "public"."job_seeker_skills" from "service_role";

revoke references on table "public"."job_seeker_skills" from "service_role";

revoke select on table "public"."job_seeker_skills" from "service_role";

revoke trigger on table "public"."job_seeker_skills" from "service_role";

revoke truncate on table "public"."job_seeker_skills" from "service_role";

revoke update on table "public"."job_seeker_skills" from "service_role";

revoke delete on table "public"."job_seekers" from "anon";

revoke insert on table "public"."job_seekers" from "anon";

revoke references on table "public"."job_seekers" from "anon";

revoke select on table "public"."job_seekers" from "anon";

revoke trigger on table "public"."job_seekers" from "anon";

revoke truncate on table "public"."job_seekers" from "anon";

revoke update on table "public"."job_seekers" from "anon";

revoke delete on table "public"."job_seekers" from "authenticated";

revoke insert on table "public"."job_seekers" from "authenticated";

revoke references on table "public"."job_seekers" from "authenticated";

revoke select on table "public"."job_seekers" from "authenticated";

revoke trigger on table "public"."job_seekers" from "authenticated";

revoke truncate on table "public"."job_seekers" from "authenticated";

revoke update on table "public"."job_seekers" from "authenticated";

revoke delete on table "public"."job_seekers" from "service_role";

revoke insert on table "public"."job_seekers" from "service_role";

revoke references on table "public"."job_seekers" from "service_role";

revoke select on table "public"."job_seekers" from "service_role";

revoke trigger on table "public"."job_seekers" from "service_role";

revoke truncate on table "public"."job_seekers" from "service_role";

revoke update on table "public"."job_seekers" from "service_role";

alter table "public"."applications" drop constraint "applications_user_id_fkey";

alter table "public"."applications" alter column "status" drop default;

alter table "public"."jobs" alter column "status" drop default;

alter type "public"."application_status" rename to "application_status__old_version_to_be_dropped";

create type "public"."application_status" as enum ('submitted', 'accepted', 'declined', 'withdrawn');

alter type "public"."job_status" rename to "job_status__old_version_to_be_dropped";

create type "public"."job_status" as enum ('open', 'filled', 'closed', 'draft');

create table "public"."application_events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "application_id" bigint not null,
    "user_id" uuid not null,
    "event" application_status not null
);


alter table "public"."application_events" enable row level security;

create table "public"."application_resumes" (
    "application_id" bigint not null,
    "resume_path" text not null
);


alter table "public"."application_resumes" enable row level security;

alter table "public"."applications" alter column status type "public"."application_status" using status::text::"public"."application_status";

alter table "public"."jobs" alter column status type "public"."job_status" using status::text::"public"."job_status";

alter table "public"."applications" alter column "status" set default None;

alter table "public"."jobs" alter column "status" set default 'open'::job_status;

drop type "public"."application_status__old_version_to_be_dropped";

drop type "public"."job_status__old_version_to_be_dropped";

alter table "public"."applications" drop column "user_id";

alter table "public"."applications" add column "job_seeker_id" bigint not null;

alter table "public"."applications" add column "updated_at" timestamp with time zone;

alter table "public"."applications" alter column "status" set default 'submitted'::application_status;

alter table "public"."applications" alter column "status" set not null;

alter table "public"."interview_rounds" drop column "status";

alter table "public"."interview_rounds" add column "company_response" interview_round_status not null default 'pending'::interview_round_status;

alter table "public"."interview_rounds" add column "job_seeker_response" interview_round_status not null default 'pending'::interview_round_status;

alter table "public"."job_seekers" add column "active_resume_id" uuid;

alter table "public"."job_seekers" alter column "user_id" set not null;

alter table "public"."jobs" add column "interview_process" jsonb;

CREATE UNIQUE INDEX application_events_pkey ON public.application_events USING btree (id);

CREATE UNIQUE INDEX application_resumes_pkey ON public.application_resumes USING btree (application_id);

CREATE INDEX applications_job_id_idx ON public.applications USING btree (job_id);

CREATE INDEX companies_industry_id_idx ON public.companies USING btree (industry_id);

CREATE INDEX company_tech_stacks_skill_version_id_idx ON public.company_tech_stacks USING btree (skill_version_id);

CREATE INDEX job_roles_role_id_idx ON public.job_roles USING btree (role_id);

CREATE UNIQUE INDEX job_seeker_id_job_id ON public.applications USING btree (job_seeker_id, job_id);

CREATE INDEX job_seeker_skills_skill_id_idx ON public.job_seeker_skills USING btree (skill_id);

CREATE INDEX job_seekers_active_resume_id_idx ON public.job_seekers USING btree (active_resume_id);

CREATE INDEX job_skill_versions_skill_version_id_idx ON public.job_skill_versions USING btree (skill_version_id);

CREATE INDEX job_skills_skill_id_idx ON public.job_skills USING btree (skill_id);

CREATE INDEX jobs_company_address_id_idx ON public.jobs USING btree (company_address_id);

CREATE INDEX jobs_company_id_idx ON public.jobs USING btree (company_id);

CREATE INDEX skill_categories_parent_skill_category_id_idx ON public.skill_categories USING btree (parent_skill_category_id);

CREATE INDEX skill_relations_related_skill_id_idx ON public.skill_relations USING btree (related_skill_id);

CREATE INDEX skills_skill_category_id_idx ON public.skills USING btree (skill_category_id);

alter table "public"."application_events" add constraint "application_events_pkey" PRIMARY KEY using index "application_events_pkey";

alter table "public"."application_resumes" add constraint "application_resumes_pkey" PRIMARY KEY using index "application_resumes_pkey";

alter table "public"."application_events" add constraint "application_events_application_id_fkey" FOREIGN KEY (application_id) REFERENCES applications(id) ON UPDATE CASCADE not valid;

alter table "public"."application_events" validate constraint "application_events_application_id_fkey";

alter table "public"."application_events" add constraint "application_events_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE not valid;

alter table "public"."application_events" validate constraint "application_events_user_id_fkey";

alter table "public"."application_resumes" add constraint "application_resumes_application_id_fkey" FOREIGN KEY (application_id) REFERENCES applications(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."application_resumes" validate constraint "application_resumes_application_id_fkey";

alter table "public"."applications" add constraint "applications_job_seeker_id_fkey" FOREIGN KEY (job_seeker_id) REFERENCES job_seekers(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."applications" validate constraint "applications_job_seeker_id_fkey";

alter table "public"."applications" add constraint "job_seeker_id_job_id" UNIQUE using index "job_seeker_id_job_id";

alter table "public"."job_seekers" add constraint "job_seekers_active_resume_id_fkey" FOREIGN KEY (active_resume_id) REFERENCES storage.objects(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."job_seekers" validate constraint "job_seekers_active_resume_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.is_company(_user_id uuid)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'public', 'pg_temp'
AS $function$
SET search_path = public, pg_temp;
SELECT EXISTS (
  SELECT 1
  FROM public.companies c
  WHERE c.user_id = _user_id
);
$function$
;

CREATE OR REPLACE FUNCTION public.is_job_seeker(_user_id uuid)
 RETURNS boolean
 LANGUAGE sql
 SECURITY DEFINER
 SET search_path TO 'public', 'pg_temp'
AS $function$
SELECT EXISTS (
  SELECT 1
  FROM public.job_seekers js
  WHERE js.user_id = _user_id
);
$function$
;

create policy "Job seekers and companies can create application events"
on "public"."application_events"
as permissive
for insert
to public
with check (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id = application_events.application_id))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id = application_events.application_id)))))))));


create policy "Job seekers and companies can view their application events"
on "public"."application_events"
as permissive
for select
to public
using (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id = application_events.application_id))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id = application_events.application_id)))))))));


create policy "Companies can view resumes for their job applications"
on "public"."application_resumes"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id = application_resumes.application_id))))))));


create policy "Job seekers can create application resumes"
on "public"."application_resumes"
as permissive
for insert
to public
with check ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id = application_resumes.application_id))))));


create policy "Job seekers can view their application resumes"
on "public"."application_resumes"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id = application_resumes.application_id))))));


create policy "Companies can update applications for their jobs"
on "public"."applications"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = applications.job_id))))));


create policy "Companies can view applications for their jobs"
on "public"."applications"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = applications.job_id))))));


create policy "Job seekers can apply for jobs"
on "public"."applications"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = applications.job_seeker_id))));


create policy "Job seekers can update applications"
on "public"."applications"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = applications.job_seeker_id))));


create policy "Job seekers can view other applications"
on "public"."applications"
as permissive
for select
to authenticated
using (is_job_seeker(auth.uid()));


create policy "Job seekers can view their applications"
on "public"."applications"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = applications.job_seeker_id))));


create policy "Companies and job seekers can create rounds"
on "public"."interview_rounds"
as permissive
for insert
to authenticated
with check (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id IN ( SELECT interviews.application_id
                   FROM interviews
                  WHERE (interviews.id = interview_rounds.interview_id))))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id IN ( SELECT interviews.application_id
                           FROM interviews
                          WHERE (interviews.id = interview_rounds.interview_id)))))))))));


create policy "Companies and job seekers can update rounds"
on "public"."interview_rounds"
as permissive
for update
to public
using (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id IN ( SELECT interviews.application_id
                   FROM interviews
                  WHERE (interviews.id = interview_rounds.interview_id))))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id IN ( SELECT interviews.application_id
                           FROM interviews
                          WHERE (interviews.id = interview_rounds.interview_id)))))))))));


create policy "Job interview rounds are visible to job seekers and companies"
on "public"."interview_rounds"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id IN ( SELECT interviews.application_id
                   FROM interviews
                  WHERE (interviews.id = interview_rounds.interview_id))))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id IN ( SELECT interviews.application_id
                           FROM interviews
                          WHERE (interviews.id = interview_rounds.interview_id)))))))))));


create policy "Companies can start interviews"
on "public"."interviews"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id = interviews.application_id))))))));


create policy "Job interviews are visible to job seekers and companies"
on "public"."interviews"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id IN ( SELECT applications.job_seeker_id
           FROM applications
          WHERE (applications.id = interviews.application_id))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id IN ( SELECT applications.job_id
                   FROM applications
                  WHERE (applications.id = interviews.application_id)))))))));


create policy "Job seekers are visible to themselves or to companies"
on "public"."job_seekers"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) = user_id) OR is_company(auth.uid())));


create policy "Companies are visible to themselves or to job seekers"
on "public"."companies"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) = user_id) OR is_job_seeker(auth.uid())));


create policy "Job roles are visible to their companies or to job seekers"
on "public"."job_roles"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_roles.job_id))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers))));


create policy "Job seekers can edit their own data"
on "public"."job_seekers"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Companies and job seekers can view job skills"
on "public"."job_skills"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_skills.job_id))))) OR (( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers))));


create policy "Jobs are visible to their companies or to job seekers"
on "public"."jobs"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id = jobs.company_id))) OR (( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers))));




  create policy "Job seekers can copy resumes fhzllv_1"
  on "storage"."objects"
  as permissive
  for insert
  to authenticated
with check (((bucket_id = 'applications'::text) AND (auth.role() = 'authenticated'::text)));



  create policy "Job seekers can delete their resumes i5g8va_0"
  on "storage"."objects"
  as permissive
  for delete
  to authenticated
using (((bucket_id = 'resumes'::text) AND (auth.role() = 'authenticated'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text)));



  create policy "Job seekers can update resumes i5g8va_0"
  on "storage"."objects"
  as permissive
  for update
  to authenticated
using (((bucket_id = 'resumes'::text) AND (auth.role() = 'authenticated'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text)));



  create policy "Job seekers can upload resumes i5g8va_0"
  on "storage"."objects"
  as permissive
  for insert
  to authenticated
with check (((bucket_id = 'resumes'::text) AND (auth.role() = 'authenticated'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text)));



  create policy "Job seekers can view resumes fhzllv_0"
  on "storage"."objects"
  as permissive
  for select
  to authenticated
using (((bucket_id = 'applications'::text) AND (auth.role() = 'authenticated'::text)));



  create policy "List resumes i5g8va_0"
  on "storage"."objects"
  as permissive
  for select
  to authenticated
using (((bucket_id = 'resumes'::text) AND (auth.role() = 'authenticated'::text) AND ((storage.foldername(name))[1] = (auth.uid())::text)));



