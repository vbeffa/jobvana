drop policy "Companies are editable only by their users" on "public"."companies";

drop policy "Enable insert for authenticated users only" on "public"."companies";

drop policy "Job skills are creatable by their companies" on "public"."job_skills";

drop policy "Job skills are deletable by their companies" on "public"."job_skills";

drop policy "Job skills are editable by their companies" on "public"."job_skills";

drop policy "Job skills are visible to their companies or to job seekers" on "public"."job_skills";

create table "public"."job_seeker_skills" (
    "job_seeker_id" bigint not null,
    "skill_id" bigint not null
);


alter table "public"."job_seeker_skills" enable row level security;

create table "public"."job_seekers" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid,
    "first_name" text not null,
    "last_name" text not null
);


alter table "public"."job_seekers" enable row level security;

CREATE UNIQUE INDEX job_seeker_skills_pkey ON public.job_seeker_skills USING btree (job_seeker_id, skill_id);

CREATE UNIQUE INDEX job_seekers_pkey ON public.job_seekers USING btree (id);

CREATE UNIQUE INDEX job_seekers_user_id_key ON public.job_seekers USING btree (user_id);

alter table "public"."job_seeker_skills" add constraint "job_seeker_skills_pkey" PRIMARY KEY using index "job_seeker_skills_pkey";

alter table "public"."job_seekers" add constraint "job_seekers_pkey" PRIMARY KEY using index "job_seekers_pkey";

alter table "public"."job_seeker_skills" add constraint "job_seeker_skills_job_seeker_id_fkey" FOREIGN KEY (job_seeker_id) REFERENCES job_seekers(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."job_seeker_skills" validate constraint "job_seeker_skills_job_seeker_id_fkey";

alter table "public"."job_seeker_skills" add constraint "job_seeker_skills_skill_id_fkey" FOREIGN KEY (skill_id) REFERENCES skills(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."job_seeker_skills" validate constraint "job_seeker_skills_skill_id_fkey";

alter table "public"."job_seekers" add constraint "job_seekers_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."job_seekers" validate constraint "job_seekers_user_id_fkey";

alter table "public"."job_seekers" add constraint "job_seekers_user_id_key" UNIQUE using index "job_seekers_user_id_key";

create policy "Companies can edit their own data"
on "public"."companies"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable insert for authenticated users of type company only"
on "public"."companies"
as permissive
for insert
to authenticated
with check (((( SELECT auth.uid() AS uid) = user_id) AND (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'type'::text) = 'company'::text)));


create policy "Job seekers can add their skills"
on "public"."job_seeker_skills"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = job_seeker_skills.job_seeker_id))));


create policy "Job seekers can delete their skills"
on "public"."job_seeker_skills"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = job_seeker_skills.job_seeker_id))));


create policy "Job seekers can update their skills"
on "public"."job_seeker_skills"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = job_seeker_skills.job_seeker_id))));


create policy "Job seekers can view their skills"
on "public"."job_seeker_skills"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT job_seekers.user_id
   FROM job_seekers
  WHERE (job_seekers.id = job_seeker_skills.job_seeker_id))));


create policy "Enable insert for authenticated users of type job seeker only"
on "public"."job_seekers"
as permissive
for insert
to authenticated
with check (((( SELECT auth.uid() AS uid) = user_id) AND (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'type'::text) = 'job_seeker'::text)));


create policy "Job seekers can edit their own data"
on "public"."job_seekers"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Job seekers can view their own data"
on "public"."job_seekers"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Companies and job seekers can view job skills"
on "public"."job_skills"
as permissive
for select
to authenticated
using (((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_skills.job_id))))) OR (((( SELECT auth.jwt() AS jwt) -> 'user_metadata'::text) ->> 'type'::text) = 'job_seeker'::text)));


create policy "Companies can add job skills"
on "public"."job_skills"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_skills.job_id))))));


create policy "Companies can delete job skills"
on "public"."job_skills"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_skills.job_id))))));


create policy "Companies can update job skills"
on "public"."job_skills"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) IN ( SELECT companies.user_id
   FROM companies
  WHERE (companies.id IN ( SELECT jobs.company_id
           FROM jobs
          WHERE (jobs.id = job_skills.job_id))))));




